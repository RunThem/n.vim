## Preprocessor
# #include <...>
snippet inc
	#include <${1:stdio}.h>

# #include "..."
snippet Inc
	#include "${1}"

# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	$0
	#endif /* !$1 */

# define
snippet def
	#define ${1}

# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif /* $1 */

# if
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif /* $1 */

# header include guard
snippet once
	#ifndef ${1:`!lua string.upper(string.gsub(vim.fn.expand('%'), '%.', '_'))`}
	#define $1

	${0}

	#endif /* end of include guard: $1 */

# Disable C++ name mangling in C headers
snippet nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif

	${0}

	#ifdef __cplusplus
	} /* extern "C" */
	#endif

## Types
# typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};

# struct
snippet st
	/*!
   * \struct $1
	 * \brief ${3:Brief struct description}
	 *
	 * ${4:Detailed description}
	 */
	struct ${1} {
		${2:Data} /*!< ${4:Description} */
	}${5: /* optional variable list */};

# typedef struct
snippet tds
	/*!
   * \struct $2
	 * \brief ${5:Brief struct description}
	 *
	 * ${6:Detailed description}
	 */
	typedef struct ${2:_$1 }{
		m_${3:Data} /*!< ${4:Description} */
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};

snippet enum
	/*!
   * \enum $1
	 *
	 * ${2:Detailed description}
	 */
	enum ${1:name} { ${0} };

# typedef enum
snippet tde
	/*!
   * \enum $2
	 *
	 * ${4:Detailed description}
	 */
	typedef enum {
		${1:Data} /*!< ${3:Description} */
	} ${2:foo};

##
# TODO section
snippet todo
	/*!
   * TODO: ${1:Todo description here}
	 * \todo $1
	 */
